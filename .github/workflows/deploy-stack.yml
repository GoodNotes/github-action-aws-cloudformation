name: 'Update Stack'

concurrency:
  group: prod_deploy
  cancel-in-progress: false

on:
  repository_dispatch:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master

jobs:
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-20.04
    if: github.actor != 'dependabot[bot]' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: ./
        name: Update CloudFormation Stack
        id: update-stack
        with:
          stack-name: 'badsyntax-github-action-example-aws-cloudformation'
          template: './cloudformation/s3bucket-example.yml'
          apply-change-set: ${{ github.event_name != 'repository_dispatch' }}
          aws-region: 'us-east-1'
          parameters: 'S3BucketName=badsyntax-github-action-example-aws-cloudformation-us-east-1&S3AllowedOrigins=https://richardwillis.info'

      - uses: badsyntax/github-action-issue-comment@v0.0.1
        name: Comment on Pull Request
        if: github.event_name == 'pull_request'
        with:
          action: 'create-clean'
          template: '.github/pr-comment-template.hbs'
          id: cloudformation
          token: ${{ secrets.GITHUB_TOKEN }}
          issueNumber: ${{ github.event.pull_request.number }}
          templateInputs: |
            {
              "changes": ${{ steps.update-stack.outputs.changes }},
              "outputs": ${{ steps.update-stack.outputs.outputs }},
              "applyChangeSet": ${{ github.event_name != 'repository_dispatch' }}
            }

      - name: Deploy Website
        run: |
          # Now that the stack is created we can deploy our
          # website to the S3 bucket.
          echo "Deploy to S3 Bucket: $S3BucketName"
        env:
          # Use outputs from the CloudFormation Stack
          S3BucketName: ${{ steps.update-stack.outputs.S3BucketName }}
